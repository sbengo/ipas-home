
############################
# General Config
############################

[general]
 # InstanceID will be a string identifying the reristor instance , It will be useful when
 # more than one running on the same server, this ID will be shown in the WebUI.
 instanceID = "IPAS_PRO"
 # datadir set the directory where the data will be placed , also sqlite db if set as db engine
 # if not set the default datadir will be placed in the configuration directory
 # datadir = "/var/lib/ipashome"

 # there are as many logs as devices configured
 # logdir set the Directory path for each device individual log, default is /var/log/ipashome
 # logdir = "/var/log/somelogpath"
 # NOTE: main process log is now sent to standard output
 # logLevel set the main process log level
 # valid values: panic,fatal,error,warn,info,debug
 logLevel = "warn"
  # where files for download will be placed
 downloaddir = "/tmp/files"

 ############################
 # DataBase Config
 ############################

[database]
#type sets the sql backend
#valid values sqlite3,mysql
 type = "sqlite3"
# these parameters are only for mysql (use mysql_setup.sql before)
# host = 127.0.0.1:3306
# user = "ipashomeruser"
# password = "ipashomepass"
# name sets the database name
 name = "ipashome"
#sqllogfile sets the name for a file in the log/ directory where sql backend will write all SQL transactions
#sqllogfile = "sql.log"
 # debug adds extra verbosity to the SQL log
 debug = false



############################
# Self Monitorig Config
############################
#config for sending self monitoring metrics to our default influx db
# Sent Measurements will be <prefix>selfmon_gvm with the following fields
# runtime_goroutines
# *mem.alloc
# *mem.mallocs
# *mem.frees
# *gc.total_pause_ns
# *memory.heap
# *gc.pause_per_second
# *gc.pause_per_interval
# *gc.gc_per_second
# *gc.gc_per_interval

[selfmon]
 #enable true/false enable/disable self monitoring
 enabled = true
 #send data Frequency
 freq = 60
 #prefix for measurement naming
 prefix = ""
 #inherit device tags
 inheritdevicetags = true
 #adds extra tags to the measurement config should be set as a csv - tag=value1,tag2=value2,...,tagN=valN
 extratags = [ "instance=ipashome_pro01" ]


############################
# Embedded WebServer Config
############################

[http]
 #port where webserver will listen waiting for connections
 port   = 5090
 #Admin credentials to access to the ipashome tool
 adminuser = "adm1"
 adminpassword = "adm1pass"
 #When more than one instance you will need customize the cookie_id allowing navigate to all instances
 cookieid ="my_instance_cookie"

############################
# Product Repo
############################

[productrepo]
 clonesource   = "https://someuser:somepassword@github.com/mycompany/metric_products.git"
 clonepath = "/tmp/clone"
 workonbranch = "workhome"
 name="ipas-home"
 email="ipas-home@ipas.org"

############################
# Jenkins
############################

[jenkins]
 url   = "http://localhost:8080"
 public_url = "https://mypublicjenkins.com"
 user = "jenkins_admin"
 password = "jenkins_password"
 timeout = "300s"
 updatefreq = "1m"
 email_notif = "ipas-home@ipas.org"



 #################################### 
 # Auth LDAP 
 ####################################

[auth_ldap]
enabled = true
allow_sign_up = true

[[auth_ldap.servers]]
# Ldap server host (specify multiple hosts space separated)
host = "127.0.0.1"
# Default port is 389 or 636 if use_ssl = true
port = 389
# Set to true if ldap server supports TLS
use_ssl = false
# Set to true if connect ldap server with STARTTLS pattern (create connection in insecure, then upgrade to secure connection with TLS)
start_tls = false
# set to true if you want to skip ssl cert validation
ssl_skip_verify = false
# set to the path to your root CA certificate or leave unset to use system defaults
# root_ca_cert = "/path/to/certificate.crt"
# Authentication against LDAP servers requiring client certificates
# client_cert = "/path/to/client.crt"
# client_key = "/path/to/client.key"

# Search user bind dn
bind_dn = "cn=admin,dc=mydomain,dc=org"
# Search user bind password
# If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
bind_password = 'toni'

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
#search_filter = "(cn=%s)"
search_filter = "(uid=%s)"

# An array of base dns to search through
search_base_dns = ["dc=mydomain,dc=org"]

## For Posix or LDAP setups that does not support member_of attribute you can define the below settings
## Please check grafana LDAP docs for examples
group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
group_search_base_dns = ["ou=group,dc=mydomain,dc=org"]
group_search_filter_user_attribute = "uid"

# Specify names of the ldap attributes your ldap uses
[auth_ldap.servers.attributes]
name = "givenName"
surname = "sn"
username = "uid"
member_of = "dn"
email =  "mail"

# Map ldap groups to grafana org roles
[[auth_ldap.servers.group_mappings]]
group_dn = "cn=admins,ou=group,dc=mydomain,dc=org"
org_role = "Admin"
# To make user an instance admin  (Grafana Admin) uncomment line below
 grafana_admin = true
# The Grafana organization database id, optional, if left out the default org (id 1) will be used
# org_id = 1

[[auth_ldap.servers.group_mappings]]
group_dn = "cn=users,,ou=group,dc=mydomain,dc=org"
org_role = "Editor"

[[auth_ldap.servers.group_mappings]]
# If you want to match all (or no ldap groups) then you can use wildcard
group_dn = "*"
org_role = "Viewer"
